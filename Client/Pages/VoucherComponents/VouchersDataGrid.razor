@using AwqafBlazor.Shared.DTOs
@inject HttpClient Http

@if (VouchersList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Total Items: @TotalItems</p>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Date</th>
                <th>Status</th>
                <th>Total</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var voucher in VouchersList.Vouchers)
            {
                <tr>
                    <td>@voucher.VoucherId</td>
                    <td>@(voucher.VoucherDate.HasValue ? voucher.VoucherDate.Value.ToShortDateString() : "N/A")</td>
                    <td>@voucher.VoucherStatusId</td>
                    <td>@(voucher.VoucherTotal.HasValue ? voucher.VoucherTotal.Value.ToString("C") : "N/A")</td>
                    <td><button class="btn btn-outline-primary">Details</button></td>
                </tr>
            }
        </tbody>
    </table>
    <p>Page @Page of @TotalPages.</p>

    <ul class="pagination">
        <li><button type="button" @onclick="PreviousPageClick" class="btn">&laquo;</button></li>
        @for (var i = 1; i <= TotalPages; i++)
        {
            var currentIndex = i;
            @if (i == Page)
            {
                <li><span class="btn btn-primary">@i</span></li>
            }
            else
            {
                <li><button type="button" class="btn" @onclick="@(() => PageNumberClick(currentIndex))">@i</button></li>
            }
        }
        <li><button type="button" @onclick="NextPageClick" class="btn">&raquo;</button></li>
    </ul>
}

@code {
    protected VoucherListDTO VouchersList;

    [Parameter]
    public int Page { get; set; } = 1;

    [Parameter]
    public int ItemsPerPage { get; set; } = 20;

    int TotalItems { get; set; }
    int TotalPages { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetVoucherData();
        Page = VouchersList.CurrentPage;
        TotalPages = VouchersList.TotalPages;
        TotalItems = VouchersList.TotalItems;
    }

    protected async Task GetVoucherData()
    {
        VouchersList = await Http.GetJsonAsync<VoucherListDTO>($"api/Vouchers?page={Page}&itemsPerPage={ItemsPerPage}");
    }

    protected async Task NextPageClick()
    {
        if (Page < TotalPages)
        {
            Page++;
            await GetVoucherData();
            StateHasChanged();
        }
    }

    protected async Task PreviousPageClick()
    {
        if (Page > 1)
        {
            Page--;
            await GetVoucherData();
            StateHasChanged();
        }
    }

    protected async Task PageNumberClick(int pageNumber)
    {
        Page = pageNumber;
        await GetVoucherData();
        StateHasChanged();
    }
}
